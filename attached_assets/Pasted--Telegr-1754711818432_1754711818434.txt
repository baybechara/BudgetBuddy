Цель проекта
Сделать автоматизированную торговую платформу, где:

Продавцы добавляют товары в Telegram-канал.

Telegram-бот парсит сообщения, отправляет их в OpenAI API, получает структурированные данные и сохраняет их.

Покупатели заходят на веб-интерфейс, где видят все товары, могут фильтровать по категории, цене, искать по названию или описанию.

Структура проекта
java
Копировать
Редактировать
/ (корневая папка)
  |-- bot.js               // Telegram-бот с обработкой OpenAI
  |-- server.js            // API для выдачи списка товаров
  |-- public/
        |-- index.html     // Главная страница с товарами
        |-- style.css      // Стили интерфейса
        |-- app.js         // Логика фронтенда (фильтры, поиск)
  |-- products.json        // Хранилище структурированных товаров
  |-- package.json         // Зависимости Node.js
  |-- .env                 // Переменные окружения (токены)
  |-- README.md            // Документация
Функциональные требования
1. Telegram-бот
Работает на Node.js с библиотекой node-telegram-bot-api.

Принимает текстовые сообщения (и фото, если есть).

Отправляет описание товара в OpenAI API.

Получает от OpenAI структурированный JSON:

json
Копировать
Редактировать
{
  "title": "Название товара",
  "category": "Категория",
  "price": 12345,
  "description": "Краткое описание",
  "image": "url_фото_если_есть"
}
Сохраняет этот JSON в products.json (добавляет в массив).

Логирует все шаги в консоль.

2. API-сервер
Реализован на Express.js.

Эндпоинт /products возвращает весь список товаров из products.json.

Поддерживает CORS, чтобы фронтенд мог запрашивать данные.

3. Веб-интерфейс для покупателей
Главная страница: сетка карточек с товарами (фото, название, цена, категория, описание).

Фильтры:

Выпадающий список категорий (заполняется на основе JSON).

Поля цены «от» и «до».

Поисковая строка (ищет по названию и описанию).

При изменении фильтра или поиска товары обновляются динамически без перезагрузки страницы.

Дизайн адаптивный (мобильная и десктопная версии).

Технологии
Node.js + Express.js — backend и API.

node-telegram-bot-api — Telegram-бот.

openai — интеграция с OpenAI API.

dotenv — хранение ключей.

HTML, CSS, JavaScript (vanilla) — фронтенд.

JSON-файл — простое хранилище товаров (вместо БД на старте).

Переменные окружения (.env)
ini
Копировать
Редактировать
TELEGRAM_TOKEN=токен_бота
OPENAI_API_KEY=ключ_openai
Как работает
Продавец пишет в Telegram-канал сообщение о товаре.

Бот получает сообщение → отправляет в OpenAI.

OpenAI возвращает исправленный и структурированный JSON.

Бот записывает товар в products.json.

Покупатель открывает сайт → сайт запрашивает /products.

Покупатель видит товары и фильтрует/ищет нужное.

Промт для Replit AI
Скопируй и вставь это в Replit AI:

Создай полный проект на Node.js с Telegram-ботом, API и веб-интерфейсом.
Требования:

Файл bot.js — Telegram-бот с библиотекой node-telegram-bot-api, который принимает сообщения с товарами, отправляет их в OpenAI API, получает структурированный JSON (название, категория, цена, описание, фото) и сохраняет в файл products.json.

Файл server.js — Express API с эндпоинтом /products, который отдаёт товары из products.json. Включить CORS.

Папка public/ с фронтендом:

index.html — страница с сеткой карточек товаров, фильтрами по категории, цене, поиском по названию/описанию.

style.css — аккуратный, адаптивный дизайн.

app.js — логика загрузки товаров с API, применения фильтров и поиска без перезагрузки страницы.

products.json — массив товаров, изначально пустой.

package.json с зависимостями: express, node-telegram-bot-api, openai, dotenv, cors.

Файл .env для хранения ключей TELEGRAM_TOKEN и OPENAI_API_KEY.

Запуск бота: node bot.js. Запуск API и фронтенда: node server.js.

Пример OpenAI запроса: исправить орфографию, выделить цену, категорию, краткое описание, фото, вернуть только JSON.
Сделай так, чтобы всё работало на Replit сразу после запуска.